name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      is-valid: ${{ steps.validate.outputs.is-valid }}

    steps:
    - name: Get version from tag
      id: get-version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Validate tag format
      id: validate
      run: |
        VERSION=${{ steps.get-version.outputs.version }}
        if [[ $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "is-valid=true" >> $GITHUB_OUTPUT
          echo "âœ“ Valid semantic version tag: $VERSION"
        else
          echo "is-valid=false" >> $GITHUB_OUTPUT
          echo "âœ— Invalid tag format: $VERSION (expected: v*.*.* e.g., v1.0.0)"
          exit 1
        fi

  build-release:
    name: Build Release Binary
    runs-on: macos-latest
    needs: validate-tag
    if: needs.validate-tag.outputs.is-valid == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: false
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-release-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-release-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: make test

    - name: Build release binaries for all platforms
      run: |
        export VERSION=${{ needs.validate-tag.outputs.version }}
        make build-all

    - name: Generate checksums
      run: make checksums

    - name: Verify binaries
      run: |
        VERSION=${{ needs.validate-tag.outputs.version }}
        echo "Verifying all platform binaries for version: $VERSION"

        # Test Darwin ARM64 binary (can run natively on macOS)
        DARWIN_ARM64_BINARY="dist/branch-wrangler-${VERSION}-darwin-arm64"
        if [ -f "$DARWIN_ARM64_BINARY" ]; then
          echo "Testing Darwin ARM64 binary: $DARWIN_ARM64_BINARY"
          $DARWIN_ARM64_BINARY --version
          $DARWIN_ARM64_BINARY --help > /dev/null

          # Verify version matches tag
          BINARY_VERSION=$($DARWIN_ARM64_BINARY --version | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*' || echo "version-not-found")
          if [ "$BINARY_VERSION" = "$VERSION" ]; then
            echo "âœ“ Darwin ARM64 binary version matches tag: $BINARY_VERSION"
          else
            echo "âœ— Darwin ARM64 version mismatch - Tag: $VERSION, Binary: $BINARY_VERSION"
            exit 1
          fi
        else
          echo "âœ— Darwin ARM64 binary not found: $DARWIN_ARM64_BINARY"
          exit 1
        fi

        # Verify other binaries exist and have correct names
        for platform in "darwin-amd64" "linux-amd64" "linux-arm64"; do
          BINARY="dist/branch-wrangler-${VERSION}-${platform}"
          if [ -f "$BINARY" ]; then
            echo "âœ“ Found $platform binary: $BINARY"
            # Basic file verification
            file "$BINARY"
          else
            echo "âœ— Missing $platform binary: $BINARY"
            exit 1
          fi
        done

        echo "âœ“ All platform binaries verified"

    - name: Upload release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: release-binaries
        path: |
          dist/branch-wrangler-*
          dist/checksums.txt
        retention-days: 1

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-tag, build-release]
    if: needs.validate-tag.outputs.is-valid == 'true'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-binaries
        path: ./dist/

    - name: Generate release notes
      id: release-notes
      run: |
        VERSION=${{ needs.validate-tag.outputs.version }}

        # Get previous tag for changelog
        PREV_TAG=$(git tag --sort=-version:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+$" | head -2 | tail -1)

        if [ -z "$PREV_TAG" ]; then
          echo "This is the first release of Branch Wrangler."
          CHANGELOG="## First Release\n\nInitial release of Branch Wrangler - a cross-platform TUI for Git branch management with GitHub integration."
        else
          echo "Generating changelog from $PREV_TAG to $VERSION"

          # Generate changelog from git commits
          CHANGELOG="## Changes\n\n"
          while IFS= read -r commit; do
            if [[ $commit =~ ^[a-f0-9]+\ (.+)$ ]]; then
              CHANGELOG="${CHANGELOG}- ${BASH_REMATCH[1]}\n"
            fi
          done < <(git log --oneline --no-merges ${PREV_TAG}..HEAD | head -20)
        fi

        # Create full release notes
        cat > release_notes.md << EOF
        # Branch Wrangler ${VERSION}

        ${CHANGELOG}

        ## Installation

        ### macOS

        1. Download the \`branch-wrangler-${VERSION}-darwin-arm64\` binary
        2. Verify the checksum against \`checksums.txt\`
        3. Make it executable: \`chmod +x branch-wrangler-${VERSION}-darwin-arm64\`
        4. Move to your PATH: \`mv branch-wrangler-${VERSION}-darwin-arm64 /usr/local/bin/branch-wrangler\`

        ### Build from Source

        \`\`\`bash
        git clone https://github.com/dfinster/branch-wrangler.git
        cd branch-wrangler
        make build-release
        \`\`\`

        ## Verification

        All binaries are signed and checksums are provided in \`checksums.txt\`.

        \`\`\`bash
        # Verify checksum (macOS)
        shasum -a 256 -c checksums.txt
        \`\`\`
        EOF

        echo "release-notes-file=release_notes.md" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.validate-tag.outputs.version }}
        name: Branch Wrangler ${{ needs.validate-tag.outputs.version }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          dist/branch-wrangler-*
          dist/checksums.txt
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release Success Notification
      run: |
        echo "ðŸŽ‰ Successfully created release ${{ needs.validate-tag.outputs.version }}"
        echo "ðŸ“¦ Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-tag.outputs.version }}"

  update-homebrew:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    needs: [validate-tag, create-release]
    if: needs.validate-tag.outputs.is-valid == 'true'

    steps:
    - name: Checkout tap repository
      uses: actions/checkout@v4
      with:
        repository: dfinster/homebrew-tap
        token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        path: homebrew-tap

    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: release-binaries
        path: ./dist/

    - name: Update formula
      run: |
        VERSION=${{ needs.validate-tag.outputs.version }}
        VERSION_NUM=${VERSION#v}  # Remove 'v' prefix

        # Get SHA256 checksums for all platforms
        DARWIN_ARM64_SHA=$(grep "branch-wrangler-${VERSION}-darwin-arm64" dist/checksums.txt | cut -d' ' -f1)
        DARWIN_AMD64_SHA=$(grep "branch-wrangler-${VERSION}-darwin-amd64" dist/checksums.txt | cut -d' ' -f1)
        LINUX_ARM64_SHA=$(grep "branch-wrangler-${VERSION}-linux-arm64" dist/checksums.txt | cut -d' ' -f1)
        LINUX_AMD64_SHA=$(grep "branch-wrangler-${VERSION}-linux-amd64" dist/checksums.txt | cut -d' ' -f1)

        echo "Platform checksums:"
        echo "  Darwin ARM64: $DARWIN_ARM64_SHA"
        echo "  Darwin AMD64: $DARWIN_AMD64_SHA"
        echo "  Linux ARM64:  $LINUX_ARM64_SHA"
        echo "  Linux AMD64:  $LINUX_AMD64_SHA"

        # Create updated formula
        cat > homebrew-tap/Formula/branch-wrangler.rb << EOF
        class BranchWrangler < Formula
          desc "Cross-platform TUI for managing local Git branches with GitHub integration"
          homepage "https://github.com/dfinster/branch-wrangler"
          version "${VERSION_NUM}"
          license "MIT"

          on_macos do
            on_arm do
              url "https://github.com/dfinster/branch-wrangler/releases/download/${VERSION}/branch-wrangler-${VERSION}-darwin-arm64"
              sha256 "${DARWIN_ARM64_SHA}"
            end

            on_intel do
              url "https://github.com/dfinster/branch-wrangler/releases/download/${VERSION}/branch-wrangler-${VERSION}-darwin-amd64"
              sha256 "${DARWIN_AMD64_SHA}"
            end
          end

          on_linux do
            on_arm do
              url "https://github.com/dfinster/branch-wrangler/releases/download/${VERSION}/branch-wrangler-${VERSION}-linux-arm64"
              sha256 "${LINUX_ARM64_SHA}"
            end

            on_intel do
              url "https://github.com/dfinster/branch-wrangler/releases/download/${VERSION}/branch-wrangler-${VERSION}-linux-amd64"
              sha256 "${LINUX_AMD64_SHA}"
            end
          end

          def install
            if OS.mac? && Hardware::CPU.arm?
              bin.install "branch-wrangler-${VERSION}-darwin-arm64" => "branch-wrangler"
            elsif OS.mac? && Hardware::CPU.intel?
              bin.install "branch-wrangler-${VERSION}-darwin-amd64" => "branch-wrangler"
            elsif OS.linux? && Hardware::CPU.arm?
              bin.install "branch-wrangler-${VERSION}-linux-arm64" => "branch-wrangler"
            elsif OS.linux? && Hardware::CPU.intel?
              bin.install "branch-wrangler-${VERSION}-linux-amd64" => "branch-wrangler"
            end
          end

          test do
            system bin/"branch-wrangler", "--version"
          end
        end
        EOF

    - name: Commit and push formula update
      run: |
        cd homebrew-tap
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add Formula/branch-wrangler.rb
        git commit -m "Update branch-wrangler to ${{ needs.validate-tag.outputs.version }}"
        git push
